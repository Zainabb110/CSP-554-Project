# -*- coding: utf-8 -*-
"""CSP554-FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BvHq5eQkAVZRcSJsPuAh9_5yWTVpsWuJ
"""

import numpy as np
import pandas as pd

# import os
# for dirname, _, filenames in os.walk('/kaggle/input'):
#     for filename in filenames:
#         print(os.path.join(dirname, filename))

from google.colab import drive
drive.mount('/content/gdrive')

path = 'gdrive/My Drive/CSP554/Project/2015.csv'

pip install pyspark

from pyspark.sql import SparkSession

spark = SparkSession \
    .builder \
    .appName("Python Spark SQL basic example") \
    .config("spark.some.config.option", "some-value") \
    .getOrCreate()

df=spark.read.csv(path, header=True, inferSchema=True)

df.show(5)

#Library
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats

scores =df.rdd.map(lambda df: df["Happiness Score"]).collect()
# Calculating mean and Stdev of AGW
df_mean = np.mean(scores)
df_std = np.std(scores)

# Calculating probability density function (PDF)
pdf = stats.norm.pdf(sorted(scores), df_mean, df_std)

print("Mean happiness score:", df_mean)
print("Standard deviation of happiness score:", df_std)

# Drawing a graph
plt.plot(sorted(scores), pdf)
#plt.xlim([30,70])
plt.xlabel("Happiness Score") # , size=12)
plt.ylabel("Frequency") #, #size=12)
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

import sklearn
from pyspark.mllib.linalg import Vectors
from pyspark.mllib.feature import Normalizer

v = Vectors.dense(range(3))
nor = Normalizer(1)
scores = np.array(scores)
normalized_score = scores / max(scores)

# Calculating mean and Stdev of AGW
normalized_df_mean = np.mean(normalized_score)
normalized_df_std = np.std(normalized_score)

# Calculating probability density function (PDF)
pdf = stats.norm.pdf(sorted(normalized_score), normalized_df_mean, normalized_df_std)

print("Mean happiness score:", normalized_df_mean)
print("Standard deviation of happiness score:", normalized_df_std)

# Drawing a graph
plt.plot(sorted(normalized_score), pdf)
#plt.xlim([30,70])
plt.xlabel("Normalized Happiness Score") # , size=12)
plt.ylabel("Frequency") #, #size=12)
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

from pyspark.sql.functions import col,isnan, when, count
print("Number of null values in each column:")
df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in df.columns]
   ).show()

df.summary().show()

data = pd.read_csv(path)
data.sample(5)

print("shape of data\n",data.shape)
print("\ncount of null value\n",data.isnull().sum())
print("\ncount of duplicated value",data.duplicated().sum())

data.info()

df.describe().show()

data.describe()

data.head()

#Data profiling : Normalization Of Data Fields

data['Economy (GDP per Capita)'] = (data['Economy (GDP per Capita)']) / (data['Economy (GDP per Capita)'].max())
data['Family'] = (data['Family']) / (data['Family'].max())
data['Happiness Score'] = (data['Happiness Score']) / (data['Happiness Score'].max())
data['Dystopia Residual'] = (data['Dystopia Residual']) / (data['Dystopia Residual'].max())
data['Health (Life Expectancy)'] = (data['Health (Life Expectancy)']) / (data['Health (Life Expectancy)'].max())
data['Freedom'] = (data['Freedom']) / (data['Freedom'].max())
data['Trust (Government Corruption)'] = (data['Trust (Government Corruption)']) / (data['Trust (Government Corruption)'].max())
data['Generosity'] = (data['Generosity']) / (data['Generosity'].max())
data['Dystopia Residual'] = (data['Dystopia Residual']) / (data['Dystopia Residual'].max())

data.describe()

data.sample(5)

"""Exploratory Analysis : What factors contribute to the happiness score of a country?"""

import matplotlib.pyplot as plt

# Histogram of Happiness Score
plt.hist(data['Happiness Score'], bins=10, edgecolor='black')
plt.xlabel('Happiness Score')
plt.ylabel('Frequency')
plt.title('Distribution of Happiness Score')
plt.show()

# Scatter plot: Happiness Score vs. Economy GDP per Capita
plt.scatter(data['Economy (GDP per Capita)'], data['Happiness Score'])
plt.xlabel('Economy (GDP per Capita)')
plt.ylabel('happiness')
plt.title('Happiness Score vs. Economy GDP per Capita')
plt.show()

# Bar chart: Happiness Rank by Country
plt.figure(figsize=(10, 35))
df_sorted = data.sort_values('Happiness Rank', ascending=True)
plt.barh(df_sorted['Country'], df_sorted['Happiness Rank'])
plt.xlabel('Country')
plt.ylabel('Happiness Rank')
plt.title('Happiness Rank by Country')
plt.xticks(rotation=90)
plt.show()

# Correlation matrix
corData = data.drop(['Country', 'Region'], axis=1)
corr_matrix = corData.corr()
plt.imshow(corr_matrix, cmap='coolwarm', interpolation='nearest')
plt.colorbar()
plt.xticks(range(len(corr_matrix)), corr_matrix.columns, rotation=45)
plt.yticks(range(len(corr_matrix)), corr_matrix.columns)
plt.title('Correlation Matrix')
plt.show()

# Data distribution and Outliers

boxplot = data.boxplot(column=['Happiness Score', 'Standard Error',
                               'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',
                               'Freedom', 'Trust (Government Corruption)', 'Generosity', 'Dystopia Residual'])

boxplot.set_xticklabels(['Happiness Score', 'Standard Error',
                         'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',
                         'Freedom', 'Trust (Government Corruption)', 'Generosity', 'Dystopia Residual'],
                        rotation=45, ha="right")

plt.title('Box Plots of Happiness Data')
plt.ylabel('Values')
plt.show()

data = data.drop(["Country", 'Region', 'Standard Error', 'Trust (Government Corruption)'], axis=1)
data.head(10)

normalized_data = data[np.abs(stats.zscore(data['Generosity'])) < 3]

normalized_data = data[~((data-data.mean()).abs() > 3*data.std())]

# Data distribution and Outliers

boxplot = normalized_data.boxplot(column=['Happiness Score',
                               'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',
                               'Freedom', 'Generosity', 'Dystopia Residual'])

boxplot.set_xticklabels(['Happiness Score',
                         'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',
                         'Freedom', 'Generosity', 'Dystopia Residual'],
                        rotation=45, ha="right")

plt.title('Box Plots of Normalized Happiness Data')
plt.ylabel('Values')
plt.show()

data.head(10)

# 1. How does the Happiness Score vary across different regions?
data2 = pd.read_csv(path)
data2.groupby('Region')['Happiness Score'].mean().plot(kind='barh')
plt.ylabel('Region')
plt.xlabel('Average Happiness Score')
plt.title('Average Happiness Score by Region')
plt.show()

# 2. What is the relationship between Economy GDP per Capita and Happiness Score?
plt.scatter(data['Economy (GDP per Capita)'], data['Happiness Score'])
plt.xlabel('Economy GDP per Capita')
plt.ylabel('Happiness Score')
plt.title('Relationship between Economy GDP per Capita and Happiness Score')
plt.show()

# 3. Is there a correlation between Health Life Expectancy and Happiness Score?
plt.scatter(data['Health (Life Expectancy)'], data['Happiness Score'])
plt.xlabel('Health Life Expectancy')
plt.ylabel('Happiness Score')
plt.title('Relationship between Health Life Expectancy and Happiness Score')
plt.show()

# 4. Countries with highest and lowest happiness score
highest_happiness = data2.loc[data['Happiness Score'].idxmax()]
lowest_happiness = data2.loc[data['Happiness Score'].idxmin()]
print(f"Highest Happiness Score: {highest_happiness['Country']} : {highest_happiness['Happiness Score']}")
print(f"Lowest Happiness Score: {lowest_happiness['Country']} : {lowest_happiness['Happiness Score']}")

# 5. Does the level of Government Corruption (Trust) impact the Happiness Score?
data2.plot(x='Trust (Government Corruption)', y='Happiness Score', kind='scatter')
plt.xlabel('Trust (Government Corruption)')
plt.ylabel('Happiness Score')
plt.title('Impact of Government Corruption on Happiness Score')
plt.show()

# 6. How does the level of Generosity vary across different regions?
data2.boxplot(column='Generosity', by='Region')
plt.xlabel('Region')
plt.ylabel('Generosity')
plt.title('Variation of Generosity by Region')
plt.xticks(rotation = 90)
plt.show()

# 7. Is there a relationship between Family support and Happiness Score?
plt.scatter(data['Family'], data['Happiness Score'])
plt.xlabel('Family Support')
plt.ylabel('Happiness Score')
plt.title('Relationship between Family Support and Happiness Score')
plt.show()

import seaborn as sns
sns.scatterplot(data=data2, x=data2['Economy (GDP per Capita)'], y=data2['Happiness Score'],hue="Region",style="Region")

"""A Title for the charts below"""

plt.figure(figsize=(20,12))
plt.subplot(2,2,1)
sns.lineplot(data2['Happiness Score'])
plt.subplot(2,2,2)
sns.lineplot(data2['Standard Error'])
plt.subplot(2,2,3)
sns.lineplot(data2['Economy (GDP per Capita)'])
plt.subplot(2,2,4)
sns.lineplot(data2['Family'])

plt.figure(figsize=(20,12))
plt.subplot(2,2,1)
sns.lineplot(data2['Health (Life Expectancy)'])
plt.subplot(2,2,2)
sns.lineplot(data2['Freedom'])
plt.subplot(2,2,3)
sns.lineplot(data2['Trust (Government Corruption)'])
plt.subplot(2,2,4)
sns.lineplot(data2['Generosity'])

plt.figure(figsize=(20,6))
plt.subplot(1,2,1)
sns.lineplot(data2['Dystopia Residual'])
plt.subplot(1,2,2)
sns.lineplot(data2['Happiness Rank'])